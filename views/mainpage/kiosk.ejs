<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Food Menu</title>
    <link rel="stylesheet" href="maincss/kiosk.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="container">
        <nav class="sidebar">
            <div class="logo" role="img" aria-label="Restaurant logo"></div>
            <button class="category-btn" data-category-id="all">All</button>
            <% category.forEach(ca => { %>
            <button class="category-btn" data-category-id="<%= ca.category_id %>"><%= ca.category_name %></button>
            <% }) %>
        </nav>
        <main class="main-content">
           <!-- <div class="search-container">
                <input type="text" class="search-input" placeholder="Search for items..." aria-label="Search for menu items">
                <span class="search-icon" aria-hidden="true">üîç</span>
            </div> -->
            <div class="menu-grid-container">
                <div class="menu-grid">
                    <% product.forEach(p => { %>
                    <div class="menu-item"data-name="<%= p.name %>" 
                        data-price="<%= p.price %>" 
                        data-image="/uploads/<%= p.product_image %>">
                        <img src="/uploads/<%= p.product_image %>" alt="Carbonara">
                        <h3><%= p.name %></h3>
                    </div>
                    <% }) %>
                </div>
            </div>
            <div id="product-modal" class="modal hidden">
                <div class="modal-content">
                    <h2 id="modal-title">Product Name</h2>
                    <img id="modal-image" src="" alt="Product Image">
                    
                    <!-- Size Selection -->
                    <div class="size-control">
                        <button class="size-btn" data-size="Small">Small</button>
                        <button class="size-btn" data-size="Medium">Medium</button>
                        <button class="size-btn" data-size="Large">Large</button>
                    </div>
                    
                    <div class="quantity-control">
                        <button id="decrease-qty" class="qty-btn">-</button>
                        <span id="quantity">1</span>
                        <button id="increase-qty" class="qty-btn">+</button>
                    </div>
                    
                    <p id="modal-price">‚Ç± 0.00</p>
                    <button id="add-to-order" class="modal-btn">Add to Order</button>
                    <button id="cancel-modal" class="modal-btn cancel-btn">Cancel</button>
                </div>
            </div>
            <div id="review-order-modal" class="modal hidden">
                <div class="modal-content">
                    <h2>Order Summary</h2>
                    <div class="order-items-container">
                        <!-- Order items will be dynamically populated here -->
                    </div>
                    <div class="review-order-footer">
                        <button id="back-to-menu" class="modal-btn">Back</button>
                        <button id="cancel-order" class="modal-btn cancel-btn">Cancel Order</button>
                        <button id="proceed-to-payment" class="modal-btn">Proceed to Payment</button>
                    </div>
                </div>
            </div>
                       
            <footer class="footer">
                <div class="total-cost">Total Items: No items in cart</div>
                <button class="review-order-btn">Review Order</button>
            </footer>
                       
        </main>
    </div>
</body>
<script>
   document.addEventListener('DOMContentLoaded', () => {
    const menuGrid = document.querySelector('.menu-grid');
    const categoryButtons = document.querySelectorAll('.category-btn');
    const modal = document.getElementById('product-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalImage = document.getElementById('modal-image');
    const modalPrice = document.getElementById('modal-price');
    const quantityDisplay = document.getElementById('quantity');
    const addToOrderBtn = document.getElementById('add-to-order');
    const cancelModalBtn = document.getElementById('cancel-modal');
    const decreaseQtyBtn = document.getElementById('decrease-qty');
    const increaseQtyBtn = document.getElementById('increase-qty');
    const sizeButtonsContainer = document.querySelector('.size-control');
    const reviewOrderModal = document.getElementById('review-order-modal');
    const reviewOrderBtn = document.querySelector('.review-order-btn');
    const backToMenuBtn = document.getElementById('back-to-menu');
    const cancelOrderBtn = document.getElementById('cancel-order');
    const proceedToPaymentButton = document.getElementById('proceed-to-payment');

    let currentQuantity = 1;
    let selectedSize = 'Medium'; // Default size
    let basePrice = 0; // Base price for the selected item

    // Function to update modal price based on quantity
    function updateModalPrice() {
        const totalPrice = (basePrice * currentQuantity).toFixed(2);
        modalPrice.textContent = `‚Ç± ${totalPrice}`;
    }

    // Attach click event to category buttons
    categoryButtons.forEach(button => {
        button.addEventListener('click', () => {
            const categoryId = button.getAttribute('data-category-id');

            fetch(categoryId === 'all' ? '/kiosk/products/all' : `/kiosk/products/${categoryId}`)
                .then(response => response.json())
                .then(products => {
                    // Clear the menu grid before populating
                    menuGrid.innerHTML = '';

                    // Populate the menu grid with fetched products
                    products.forEach(product => {
                        let price = product.category_type === 'food'
                            ? product.sizes && product.sizes.length > 0
                                ? product.sizes[0].price // Use the price of the first size
                                : '0.00' // Default price if sizes array is empty
                            : product.price || '0.00';

                        const menuItem = `
                            <div class="menu-item" 
                                data-name="${product.name}" 
                                data-category="${product.category_type}" 
                                data-price="${price}" 
                                data-image="/uploads/${product.product_image}" 
                                data-sizes='${JSON.stringify(product.sizes || [])}' 
                                data-id="${product.product_id}">
                                <img src="/uploads/${product.product_image}" alt="${product.name}">
                                <h3>${product.name}</h3>
                            </div>
                        `;
                        menuGrid.innerHTML += menuItem;
                    });

                    // Attach click events to newly created menu items
                    attachMenuItemEvents();
                })
                .catch(error => console.error('Error fetching products:', error));
        });
    });

    // Function to attach events to menu items
    function attachMenuItemEvents() {
        const menuItems = document.querySelectorAll('.menu-item');

        menuItems.forEach(item => {
            item.addEventListener('click', () => {
                const name = item.getAttribute('data-name');
                const category = item.getAttribute('data-category');
                const image = item.getAttribute('data-image');
                const sizes = JSON.parse(item.getAttribute('data-sizes') || '[]');
                const price = parseFloat(item.getAttribute('data-price') || '0.00');
                const productId = item.getAttribute('data-id'); // Get the product ID

                // Populate modal with product details
                modalTitle.textContent = name;
                modalImage.src = image;
                currentQuantity = 1;
                quantityDisplay.textContent = currentQuantity;

                basePrice = price; // Set base price
                updateModalPrice(); // Set initial price

                // Set the product ID in the modal
                modal.setAttribute('data-id', productId); // Add product ID to the modal

                // Determine category behavior
                if (category === 'food') {
                    sizeButtonsContainer.style.display = 'none';
                    selectedSize = sizes.length > 0 ? sizes[0].name : 'Default';
                    modalPrice.textContent = `‚Ç± ${price.toFixed(2)}`;
                } else if (category === 'beverage') {
                    sizeButtonsContainer.style.display = 'flex';
                    sizeButtonsContainer.innerHTML = '';

                    sizes.forEach(size => {
                        const sizeButton = document.createElement('button');
                        sizeButton.classList.add('size-btn');
                        sizeButton.textContent = size.name;
                        sizeButton.setAttribute('data-price', size.price);
                        sizeButton.addEventListener('click', () => {
                            basePrice = parseFloat(size.price); // Update base price on size selection
                            updateModalPrice(); // Update price
                            selectedSize = size.name;
                        });
                        sizeButtonsContainer.appendChild(sizeButton);
                    });
                }

                modal.classList.remove('hidden');
            });
        });
    }

    
    reviewOrderBtn.addEventListener('click', () => {
    fetchCartItems(); // Fetch and display cart items
    reviewOrderModal.classList.remove('hidden'); // Show the modal
});


    // Close Review Order Modal (Back to Menu)
    backToMenuBtn.addEventListener('click', () => {
        reviewOrderModal.classList.add('hidden');
    });

    // Cancel Order
    cancelOrderBtn.addEventListener('click', () => {
    fetch('/cart/items', { method: 'DELETE' }) // Call the delete endpoint
        .then(response => {
            if (response.ok) {
                fetchCartItems(); // Refresh the cart summary
                reviewOrderModal.classList.add('hidden'); // Hide the modal
                showToast('Order canceled successfully!'); // Optional feedback
            } else {
                console.error('Failed to clear cart:', response.statusText);
                showToast('Failed to cancel order. Please try again.');
            }
        })
        .catch(error => {
            console.error('Error clearing cart:', error);
            showToast('An error occurred while canceling the order.');
        });
});

proceedToPaymentButton.addEventListener('click', () => {
    const cartId = 1; // Replace with your actual cart ID logic

    fetch('/cart/proceed-to-payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ cartId }),
    })
        .then((response) => response.json())
        .then((data) => {
            if (data.message) {
                Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
            }

            if (data.order_no) {
                console.log(`Order No: ${data.order_no}`);
            }

            // Close the modal
            reviewOrderModal.classList.add('hidden');

            // Redirect to the kiosk (or desired page) after the user clicks OK
            Swal.fire({
                title: 'Order Placed!',
                text: 'Redirecting to the main menu...',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/kiosk'; // Update this path if necessary
                }
            });
        })
        .catch((error) => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An error occurred while processing your order.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
});


    // Quantity increase
    increaseQtyBtn.addEventListener('click', () => {
        currentQuantity++;
        quantityDisplay.textContent = currentQuantity;
        updateModalPrice(); // Update price
    });

    // Quantity decrease
    decreaseQtyBtn.addEventListener('click', () => {
        if (currentQuantity > 1) {
            currentQuantity--;
            quantityDisplay.textContent = currentQuantity;
            updateModalPrice(); // Update price
        }
    });

    // Add to Order functionality
    addToOrderBtn.addEventListener('click', () => {
    const productId = modal.getAttribute('data-id');
    const size = selectedSize;
    const quantity = currentQuantity;

    // Send data to the backend
    fetch('/cart/add', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            productId: parseInt(productId),
            size: size,
            quantity: parseInt(quantity),
            price: parseFloat(basePrice), // Send base price instead of multiplied price
        }),
    })
    .then(response => response.json())
    .then(data => {
        // Fetch the updated cart items after adding the new product
        fetchCartItems(); // Fetch cart items to update order summary
    })
    .catch(error => console.error('Error adding to cart:', error));

    modal.classList.add('hidden'); // Hide modal
});



    // Fetch cart items and update the order summary
    // Fetch cart items and update the order summary and footer
function fetchCartItems() {
    fetch('/cart/items') // Fetch cart items from the backend
        .then(response => response.json())
        .then(cartItems => {
            console.log('Fetched cart items:', cartItems); // Debugging
            updateOrderSummary(cartItems); // Update modal order summary
            updateFooterSummary(cartItems); // Update footer total items & cost
        })
        .catch(error => console.error('Error fetching cart items:', error));
}



    // Function to update the order summary
    // Function to update the order summary modal
// Function to update the order summary modal
function updateOrderSummary(cartItems) {
    const orderSummary = document.querySelector('.order-items-container'); // Modal container

    // Clear existing items in the modal
    orderSummary.innerHTML = '';

    let totalCost = 0;

    // Loop through cart items and create summary entries
    cartItems.forEach(item => {
        totalCost += item.price * item.quantity;

        const itemHTML = `
            <div class="order-summary-item">
                <span>${item.quantity}x ${item.name} (${item.size || ''})</span>
                <span>‚Ç±${(item.price * item.quantity).toFixed(2)}</span>
                <button class="delete-btn" data-id="${item.cart_item_id}">
                    Delete
                </button>
            </div>
        `;
        orderSummary.innerHTML += itemHTML;
    });

    // Append the total price at the bottom of the modal
    const totalHTML = `
        <div class="order-summary-total">
            <strong>Total Price:</strong> ‚Ç±${totalCost.toFixed(2)}
        </div>
    `;
    orderSummary.innerHTML += totalHTML;

    // Attach click event to delete buttons
    attachDeleteEvents();
}

// Function to attach delete events to the delete buttons
function attachDeleteEvents() {
    const deleteButtons = document.querySelectorAll('.delete-btn');

    deleteButtons.forEach(button => {
        button.addEventListener('click', () => {
            const cartItemId = button.getAttribute('data-id');

            // Send DELETE request to the backend
            fetch(`/cart/item/${cartItemId}`, { method: 'DELETE' })
                .then(() => {
                    fetchCartItems(); // Refresh the cart items after deletion
                })
                .catch(error => console.error('Error deleting cart item:', error));
        });
    });
}




// Function to update the footer with cart totals
function updateFooterSummary(cartItems) {
    const totalCostDiv = document.querySelector('.total-cost');

    if (!totalCostDiv) {
        console.error('Footer container not found!');
        return;
    }

    let totalItems = 0;

    // Calculate total items
    cartItems.forEach(item => {
        totalItems += item.quantity;
    });

    // Update footer with total items
    totalCostDiv.textContent = `Total Items: ${totalItems} items in the cart`;
}





    fetchCartItems(); 

    // Cancel modal
    cancelModalBtn.addEventListener('click', () => {
        modal.classList.add('hidden');
    });

    // Fetch all products initially
    fetch('/kiosk/products/all')
        .then(response => response.json())
        .then(products => {
            // Clear the menu grid before populating
            menuGrid.innerHTML = '';

            // Populate the menu grid with fetched products
            products.forEach(product => {
                const menuItem = `
                    <div class="menu-item" 
                        data-name="${product.name}" 
                        data-category="${product.category_type}" 
                        data-price="${product.price || product.size_price || ''}" 
                        data-image="/uploads/${product.product_image}" 
                        data-sizes='${JSON.stringify(product.sizes || [])}' 
                        data-id="${product.product_id}">
                        <img src="/uploads/${product.product_image}" alt="${product.name}">
                        <h3>${product.name}</h3>
                    </div>
                `;
                menuGrid.innerHTML += menuItem;
            });

            // Attach click events to newly created menu items
            attachMenuItemEvents();
        })
        .catch(error => console.error('Error fetching products:', error));
});

</script>
</html>
