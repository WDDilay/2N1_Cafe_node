<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Food Menu</title>
    <link rel="stylesheet" href="maincss/kiosk.css">
</head>
<body>
    <div class="container">
        <nav class="sidebar">
            <div class="logo" role="img" aria-label="Restaurant logo"></div>
            <button class="category-btn" data-category-id="all">All</button>
            <% category.forEach(ca => { %>
            <button class="category-btn" data-category-id="<%= ca.category_id %>"><%= ca.category_name %></button>
            <% }) %>
        </nav>
        <main class="main-content">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search for items..." aria-label="Search for menu items">
                <span class="search-icon" aria-hidden="true">üîç</span>
            </div>
            <div class="menu-grid-container">
                <div class="menu-grid">
                    <% product.forEach(p => { %>
                    <div class="menu-item"data-name="<%= p.name %>" 
                        data-price="<%= p.price %>" 
                        data-image="/uploads/<%= p.product_image %>">
                        <img src="/uploads/<%= p.product_image %>" alt="Carbonara">
                        <h3><%= p.name %></h3>
                    </div>
                    <% }) %>
                </div>
            </div>
            <div id="product-modal" class="modal hidden">
                <div class="modal-content">
                    <h2 id="modal-title">Product Name</h2>
                    <img id="modal-image" src="" alt="Product Image">
                    
                    <!-- Size Selection -->
                    <div class="size-control">
                        <button class="size-btn" data-size="Small">Small</button>
                        <button class="size-btn" data-size="Medium">Medium</button>
                        <button class="size-btn" data-size="Large">Large</button>
                    </div>
                    
                    <div class="quantity-control">
                        <button id="decrease-qty" class="qty-btn">-</button>
                        <span id="quantity">1</span>
                        <button id="increase-qty" class="qty-btn">+</button>
                    </div>
                    
                    <p id="modal-price">‚Ç± 0.00</p>
                    <button id="add-to-order" class="modal-btn">Add to Order</button>
                    <button id="cancel-modal" class="modal-btn cancel-btn">Cancel</button>
                </div>
            </div>            
            <footer class="footer">
                <div class="total-cost">Total: ‚Ç± 0.00</div>
                <div class="order-summary">
                    <!-- Order summary will be populated dynamically -->
                </div>
                <button class="review-order-btn">Review Order</button>
            </footer>
        </main>
    </div>
</body>
<script>
    document.addEventListener('DOMContentLoaded', () => {
    const menuGrid = document.querySelector('.menu-grid');
    const categoryButtons = document.querySelectorAll('.category-btn');
    const modal = document.getElementById('product-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalImage = document.getElementById('modal-image');
    const modalPrice = document.getElementById('modal-price');
    const quantityDisplay = document.getElementById('quantity');
    const addToOrderBtn = document.getElementById('add-to-order');
    const cancelModalBtn = document.getElementById('cancel-modal');
    const decreaseQtyBtn = document.getElementById('decrease-qty');
    const increaseQtyBtn = document.getElementById('increase-qty');
    const sizeButtonsContainer = document.querySelector('.size-control');

    let currentQuantity = 1;
    let selectedSize = 'Medium'; // Default size

    // Attach click event to category buttons
    categoryButtons.forEach(button => {
        button.addEventListener('click', () => {
            const categoryId = button.getAttribute('data-category-id');

            fetch(categoryId === 'all' ? '/kiosk/products/all' : `/kiosk/products/${categoryId}`)
    .then(response => response.json())
    .then(products => {
        // Clear the menu grid before populating
        menuGrid.innerHTML = '';

        // Populate the menu grid with fetched products
        products.forEach(product => {
            // Determine price for food type products
            let price = product.category_type === 'food'
                ? product.sizes && product.sizes.length > 0
                    ? product.sizes[0].price // Use the price of the first size
                    : '0.00' // Default price if sizes array is empty
                : product.price || '0.00';

            const menuItem = `
                <div class="menu-item" 
                    data-name="${product.name}" 
                    data-category="${product.category_type}" 
                    data-price="${price}" 
                    data-image="/uploads/${product.product_image}" 
                    data-sizes='${JSON.stringify(product.sizes || [])}' 
                    data-id="${product.product_id}">
                    <img src="/uploads/${product.product_image}" alt="${product.name}">
                    <h3>${product.name}</h3>
                </div>
            `;
            menuGrid.innerHTML += menuItem;
        });

        // Attach click events to newly created menu items
        attachMenuItemEvents();
    })
    .catch(error => console.error('Error fetching products:', error));
        });
    });

    // Function to attach events to menu items
    function attachMenuItemEvents() {
        const menuItems = document.querySelectorAll('.menu-item');

        menuItems.forEach(item => {
            item.addEventListener('click', () => {
                const name = item.getAttribute('data-name');
                const category = item.getAttribute('data-category'); // Get category
                const image = item.getAttribute('data-image');
                const sizes = JSON.parse(item.getAttribute('data-sizes') || '[]');
                const price = item.getAttribute('data-price');

                // Populate modal with product details
                modalTitle.textContent = name;
                modalImage.src = image;
                currentQuantity = 1;
                quantityDisplay.textContent = currentQuantity;

                // Determine category behavior
                if (category === 'food') {
                    // Hide size buttons and display price
                    sizeButtonsContainer.style.display = 'none';
                    modalPrice.textContent = `‚Ç± ${price}`;
                } else if (category === 'beverage') {
                    // Show size buttons for beverages
                    sizeButtonsContainer.style.display = 'flex';
                    sizeButtonsContainer.innerHTML = ''; // Clear existing buttons

                    sizes.forEach(size => {
                        const sizeButton = document.createElement('button');
                        sizeButton.classList.add('size-btn');
                        sizeButton.textContent = size.name;
                        sizeButton.setAttribute('data-price', size.price);
                        sizeButton.addEventListener('click', () => {
                            modalPrice.textContent = `‚Ç± ${size.price}`;
                            selectedSize = size.name;
                        });
                        sizeButtonsContainer.appendChild(sizeButton);
                    });
                }

                modal.classList.remove('hidden');
            });
        });
    }

    // Quantity increase and decrease
    increaseQtyBtn.addEventListener('click', () => {
        currentQuantity++;
        quantityDisplay.textContent = currentQuantity;
    });

    decreaseQtyBtn.addEventListener('click', () => {
        if (currentQuantity > 1) {
            currentQuantity--;
            quantityDisplay.textContent = currentQuantity;
        }
    });

    // Add to Order functionality
    addToOrderBtn.addEventListener('click', () => {
        console.log(`Added to order: ${modalTitle.textContent}, Size: ${selectedSize || 'N/A'}, Quantity: ${currentQuantity}, Price: ${modalPrice.textContent}`);
        modal.classList.add('hidden');
    });

    // Cancel modal
    cancelModalBtn.addEventListener('click', () => {
        modal.classList.add('hidden');
    });

    // Fetch all products initially
    // Fetch all products initially
fetch('/kiosk/products/all')
    .then(response => response.json())
    .then(products => {
        // Clear the menu grid before populating
        menuGrid.innerHTML = '';

        // Populate the menu grid with fetched products
        products.forEach(product => {
            const menuItem = `
                <div class="menu-item" 
                    data-name="${product.name}" 
                    data-category="${product.category_type}" 
                    data-price="${product.price || product.size_price || ''}" 
                    data-image="/uploads/${product.product_image}" 
                    data-sizes='${JSON.stringify(product.sizes || [])}' 
                    data-id="${product.product_id}">
                    <img src="/uploads/${product.product_image}" alt="${product.name}">
                    <h3>${product.name}</h3>
                </div>
            `;
            menuGrid.innerHTML += menuItem;
        });

        // Attach click events to newly created menu items
        attachMenuItemEvents();
    })
    .catch(error => console.error('Error fetching all products:', error));

});

</script>

</html>