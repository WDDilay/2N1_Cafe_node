<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Food Menu</title>
    <link rel="stylesheet" href="maincss/kiosk.css">
</head>

<body>
    <div class="container">
        <nav class="sidebar">
            <div class="logo" role="img" aria-label="Restaurant logo"></div>
            <button class="category-btn" data-category-id="all">All</button>
            <% category.forEach(ca => { %>
            <button class="category-btn" data-category-id="<%= ca.category_id %>"><%= ca.category_name %></button>
            <% }) %>
        </nav>
        <main class="main-content">
            <div class="menu-grid-container">
                <div class="menu-grid" id="menu-grid">
                    <!-- Products will be dynamically inserted here -->
                </div>
            </div>

            <!-- Product Modal -->
            <div id="product-modal" class="modal hidden">
                <div class="modal-content">
                    <h2 id="modal-title">Product Name</h2>
                    <img id="modal-image" src="" alt="Product Image">
                    <div class="size-control hidden"></div>
                    <div class="quantity-control">
                        <button id="decrease-qty" class="qty-btn">-</button>
                        <span id="quantity">1</span>
                        <button id="increase-qty" class="qty-btn">+</button>
                    </div>
                    <p id="modal-price">₱ 0.00</p>
                    <button id="add-to-order" class="modal-btn">Add to Order</button>
                    <button id="cancel-modal" class="modal-btn cancel-btn">Cancel</button>
                </div>
            </div>

            <!-- Order Summary Modal -->
            <div id="order-modal" class="modal hidden">
                <div class="modal-content">
                    <h2>Your Order</h2>
                    <div class="order-summary"></div>
                    <button class="modal-btn" id="close-order-modal">Close</button>
                    <button class="modal-btn cancel-btn" id="cancel-order">Cancel Order</button>
                    <button class="modal-btn" id="checkout-btn">Proceed to Payment</button>
                </div>
            </div>

            <footer class="footer">
                <div class="total-cost"><strong>Total Items:</strong> No items in cart</div>
                <button class="review-order-btn">Review Order</button>
            </footer>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('product-modal');
            const modalTitle = document.getElementById('modal-title');
            const modalImage = document.getElementById('modal-image');
            const modalPrice = document.getElementById('modal-price');
            const quantityDisplay = document.getElementById('quantity');
            const sizeButtonsContainer = document.querySelector('.size-control');
            const addToOrderBtn = document.getElementById('add-to-order');
            const cancelModalBtn = document.getElementById('cancel-modal');
            const orderModal = document.getElementById('order-modal');
            const reviewOrderBtn = document.querySelector('.review-order-btn');
            const closeOrderModalBtn = document.getElementById('close-order-modal');
            const cancelOrderBtn = document.getElementById('cancel-order');
            const totalCostDiv = document.querySelector('.total-cost');
            const orderSummary = document.querySelector('.order-summary');

            let basePrice = 0;
            let currentQuantity = 1;
            let selectedSize = '';
            let cart = [];

            // Function to update the modal price
            function updateModalPrice() {
                modalPrice.textContent = `₱ ${(basePrice * currentQuantity).toFixed(2)}`;
            }

            // Function to clear the existing products in the grid
            function clearProductGrid() {
                const menuGrid = document.getElementById('menu-grid');
                menuGrid.innerHTML = ''; // Clears existing products
            }

            // Category selection event handler
            const categoryButtons = document.querySelectorAll('.category-btn');
            categoryButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const categoryId = button.getAttribute('data-category-id');

                    // Fetch products based on category
                    fetch(categoryId === 'all' ? '/kiosk/products/all' : `/kiosk/products/${categoryId}`)
                        .then(response => response.json())
                        .then(products => {
                            // Clear the menu grid before populating new products
                            clearProductGrid();

                            // Populate the menu grid with fetched products
                            if (products.length > 0) {
                                products.forEach(product => {
                                    let price = product.category_type === 'food'
                                        ? product.sizes && product.sizes.length > 0
                                            ? product.sizes[0].price // Use the price of the first size
                                            : '0.00' // Default price if sizes array is empty
                                        : product.price || '0.00';

                                    const menuItem = document.createElement('div');
                                    menuItem.classList.add('menu-item');
                                    menuItem.dataset.name = product.name;
                                    menuItem.dataset.category = product.category_type;
                                    menuItem.dataset.price = price;
                                    menuItem.dataset.image = `/uploads/${product.product_image}`;
                                    menuItem.dataset.sizes = JSON.stringify(product.sizes || []);
                                    menuItem.dataset.id = product.product_id;

                                    const img = document.createElement('img');
                                    img.src = `/uploads/${product.product_image}`;
                                    img.alt = product.name;

                                    const h3 = document.createElement('h3');
                                    h3.textContent = product.name;

                                    menuItem.appendChild(img);
                                    menuItem.appendChild(h3);

                                    document.getElementById('menu-grid').appendChild(menuItem);
                                });
                                attachMenuItemEvents();
                            } else {
                                const noProductsMessage = document.createElement('div');
                                noProductsMessage.classList.add('no-products-message');
                                noProductsMessage.textContent = 'No products available for this category.';
                                document.getElementById('menu-grid').appendChild(noProductsMessage);
                            }
                        })
                        .catch(error => console.error('Error fetching products:', error));
                });
            });

            // Function to open the modal with product details
            function openModal(product) {
                modalTitle.textContent = product.name;
                modalImage.src = product.image;
                basePrice = parseFloat(product.price) || 0; // Ensure a valid base price
                currentQuantity = 1;
                quantityDisplay.textContent = currentQuantity;
                updateModalPrice();
                sizeButtonsContainer.innerHTML = '';

                if (product.sizes && product.sizes.length > 0) {
                    // Display size options for beverages
                    product.sizes.forEach(size => {
                        const button = document.createElement('button');
                        button.classList.add('size-btn');
                        button.textContent = size.name;
                        button.dataset.price = size.price;
                        button.addEventListener('click', () => {
                            basePrice = parseFloat(size.price) || 0; // Update price based on selected size
                            selectedSize = size.name;
                            updateModalPrice();
                        });
                        sizeButtonsContainer.appendChild(button);
                    });
                    sizeButtonsContainer.classList.remove('hidden');
                } else {
                    // No size options for food, hide size control
                    sizeButtonsContainer.classList.add('hidden');
                    selectedSize = ''; // No size selected
                }
                modal.classList.remove('hidden');
            }

            // Attach click events to menu items to open the modal
            function attachMenuItemEvents() {
                document.querySelectorAll('.menu-item').forEach(item => {
                    item.addEventListener('click', () => {
                        const product = {
                            name: item.dataset.name,
                            image: item.dataset.image,
                            price: item.dataset.price,
                            sizes: JSON.parse(item.dataset.sizes || '[]'),
                            id: item.dataset.id
                        };
                        openModal(product);
                    });
                });
            }

            // Update the order summary in the cart
            function updateOrderSummary() {
                orderSummary.innerHTML = ''; // Clear the current order summary
                let totalItems = 0;
                let totalPrice = 0;

                cart.forEach(item => {
                    totalItems += item.quantity;
                    totalPrice += item.price;

                    const orderItem = `
                        <div class="order-summary-item">
                            ${item.quantity}x ${item.name} ${item.size ? `(${item.size})` : ''} - ₱${item.price.toFixed(2)}
                            <button class="delete-btn" data-id="${item.id}">Delete</button>
                        </div>`;
                    orderSummary.innerHTML += orderItem;
                });

                totalCostDiv.innerHTML = `<strong>Total Items:</strong> ${totalItems} items, ₱${totalPrice.toFixed(2)}`;

                // Attach delete button events after updating the order summary
                attachDeleteButtonEvents();
            }

            // Attach delete button events
            function attachDeleteEvents() {
                document.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', () => {
                        const productId = button.dataset.id;
                        cart = cart.filter(item => item.id !== productId);
                        updateOrderSummary();
                    });
                });
            }

            // Add item to cart
            addToOrderBtn.addEventListener('click', () => {
                const product = {
                    name: modalTitle.textContent,
                    price: basePrice * currentQuantity,
                    quantity: currentQuantity,
                    size: selectedSize,
                    id: modal.dataset.id
                };

                cart.push(product);
                updateOrderSummary();
                modal.classList.add('hidden');
            });

            // Handle canceling the modal
            cancelModalBtn.addEventListener('click', () => {
                modal.classList.add('hidden');
            });

            // Handle quantity change
            document.getElementById('increase-qty').addEventListener('click', () => {
                currentQuantity++;
                quantityDisplay.textContent = currentQuantity;
                updateModalPrice();
            });

            document.getElementById('decrease-qty').addEventListener('click', () => {
                if (currentQuantity > 1) {
                    currentQuantity--;
                    quantityDisplay.textContent = currentQuantity;
                    updateModalPrice();
                }
            });

            // Handle review order button
            reviewOrderBtn.addEventListener('click', () => {
                orderModal.classList.remove('hidden');
            });

            // Close order modal
            closeOrderModalBtn.addEventListener('click', () => {
                orderModal.classList.add('hidden');
            });

            // Cancel the order
            cancelOrderBtn.addEventListener('click', () => {
                cart = [];
                updateOrderSummary();
                orderModal.classList.add('hidden');
            });

            attachMenuItemEvents();
            
            // Initialize by showing all products
            fetch('/kiosk/products/all')
                .then(response => response.json())
                .then(products => {
                    clearProductGrid();
                    products.forEach(product => {
                        let price = product.category_type === 'food'
                            ? product.sizes && product.sizes.length > 0
                                ? product.sizes[0].price
                                : '0.00'
                            : product.price || '0.00';

                        const menuItem = document.createElement('div');
                        menuItem.classList.add('menu-item');
                        menuItem.dataset.name = product.name;
                        menuItem.dataset.category = product.category_type;
                        menuItem.dataset.price = price;
                        menuItem.dataset.image = `/uploads/${product.product_image}`;
                        menuItem.dataset.sizes = JSON.stringify(product.sizes || []);
                        menuItem.dataset.id = product.product_id;

                        const img = document.createElement('img');
                        img.src = `/uploads/${product.product_image}`;
                        img.alt = product.name;

                        const h3 = document.createElement('h3');
                        h3.textContent = product.name;

                        menuItem.appendChild(img);
                        menuItem.appendChild(h3);

                        document.getElementById('menu-grid').appendChild(menuItem);
                    });

                    attachMenuItemEvents();
                })
                .catch(error => console.error('Error fetching products:', error));
        });
    </script>
</body>

</html>
